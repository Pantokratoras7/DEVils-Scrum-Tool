package scrumtool.data.entities;

import scrumtool.model.Task;
import scrumtool.data.DataAccess;

import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;



public class TaskDB implements TaskInterface {

    @Override
    public Task insert(Task task) {

        DataAccess dataAccess = new DataAccess();
        JdbcTemplate jdbcTemplate = dataAccess.getInstance();

        // Insert a pbi into PBI table
        String query = "insert into Task (description, state, PBI_id) values (?, ?, ?);";
        // Because we want it to go into to do section
        task.setState(1);
        // Id is generated by database (Auto Increment)
        try {
            KeyHolder keyHolder = new GeneratedKeyHolder();

            jdbcTemplate.update(new PreparedStatementCreator() {
                @Override
                public PreparedStatement createPreparedStatement(Connection con) throws SQLException {
                    PreparedStatement statement = con.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
                    statement.setString(1, task.getDescription());
                    statement.setInt(2, task.getState());
                    statement.setInt(3, task.getPBI_id());
                    return statement;
                }
            }, keyHolder);

            // Return the new generated id for pbi
            int idTask = keyHolder.getKey().intValue();
            task.setId(idTask);
            return task;

            // Error in update of jdbcTemplate
        } catch (EmptyResultDataAccessException e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public Task update(Task task) {

        DataAccess dataAccess = new DataAccess();
        JdbcTemplate jdbcTemplate = dataAccess.getInstance();
        // Update an existing PBI
        String query = "update Task set description=?, state=?, PBI_id=? where idTask=?;";
        try {
            jdbcTemplate.update(new PreparedStatementCreator() {
                @Override
                public PreparedStatement createPreparedStatement(Connection con) throws SQLException {
                    PreparedStatement statement = con.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
                    statement.setString(1, task.getDescription());
                    statement.setInt(2, task.getState());
                    statement.setInt(3, task.getPBI_id());
                    statement.setInt(4, task.getId());
                    return statement;
                }
            });
            // PBI's id is already in pbi class (as returned from frontend)
            return task;
            // Error in update of jdbcTemplate
        } catch (EmptyResultDataAccessException e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public int delete(Task task) throws SQLException {
        // Delete issue
        DataAccess dataAccess = new DataAccess();
        DataSource dataSource = dataAccess.getDataSource();

        String query1 = "delete from Task where idTask = ?;";
        String query2 = "delete from Issue where Task_id = ?;";
        //return jdbcTemplate.update(query, new Object[]{task.getId()});

        PreparedStatement statement1 = null;
        PreparedStatement statement2 = null;
        Connection dbConnection = null;
        // For 2 or more queries, transactions must be placed
        try {
            dbConnection = dataSource.getConnection();
            dbConnection.setAutoCommit(false);

            statement1 = dbConnection.prepareStatement(query1);
            statement1.setInt(1, task.getId());
            statement1.executeUpdate();

            // Delete issues that are connected to this task
            statement2 = dbConnection.prepareStatement(query2);
            statement2.setInt(1, task.getId());
            statement2.executeUpdate();

            dbConnection.commit();      //Commit manually for single transaction
            return 1;
        // Error in one of the insert statements
        } catch (SQLException e) {
            e.printStackTrace();
            dbConnection.rollback();
            return -1;
        // Finally close statements and connection
        } finally {
            if (statement1 != null) {
                statement1.close();
            }
            if (statement2 != null) {
                statement2.close();
            }
            if (dbConnection != null) {
                dbConnection.close();
            }
        }
    }
}
