package scrumtool.data.entities;

import scrumtool.model.Task;
import scrumtool.data.DataAccess;

import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;



public class TaskDB implements TaskInterface {

    @Override
    public Task insert(Task task) {

        DataAccess dataAccess = new DataAccess();
        JdbcTemplate jdbcTemplate = dataAccess.getInstance();

        // Insert a pbi into PBI table
        String query = "insert into Task (description, state, PBI_id) values (?, ?, ?);";
        // Because we want it to go into to do section
        task.setState(1);
        // Id is generated by database (Auto Increment)
        try {
            KeyHolder keyHolder = new GeneratedKeyHolder();

            jdbcTemplate.update(new PreparedStatementCreator() {
                @Override
                public PreparedStatement createPreparedStatement(Connection con) throws SQLException {
                    PreparedStatement statement = con.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
                    statement.setString(1, task.getDescription());
                    statement.setInt(2, task.getState());
                    statement.setInt(3, task.getPBI_id());
                    return statement;
                }
            }, keyHolder);

            // Return the new generated id for pbi
            int idTask = keyHolder.getKey().intValue();
            task.setId(idTask);
            return task;

            // Error in update of jdbcTemplate
        } catch (EmptyResultDataAccessException e) {
            e.printStackTrace();
            return null;
        }
    }

    @Override
    public Task update(Task task) {

        DataAccess dataAccess = new DataAccess();
        JdbcTemplate jdbcTemplate = dataAccess.getInstance();
        // Update an existing PBI
        String query = "update Task set description=?, state=?, PBI_id=? where idTask=?;";
        try {
            jdbcTemplate.update(new PreparedStatementCreator() {
                @Override
                public PreparedStatement createPreparedStatement(Connection con) throws SQLException {
                    PreparedStatement statement = con.prepareStatement(query, Statement.RETURN_GENERATED_KEYS);
                    statement.setString(1, task.getDescription());
                    statement.setInt(2, task.getState());
                    statement.setInt(3, task.getPBI_id());
                    statement.setInt(4, task.getId());
                    return statement;
                }
            });
            // PBI's id is already in pbi class (as returned from frontend)
            return task;
            // Error in update of jdbcTemplate
        } catch (EmptyResultDataAccessException e) {
            e.printStackTrace();
            return null;
        }
    }
}
